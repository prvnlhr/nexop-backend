generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  fullname  String
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  cart      Cart?
  Order     Order[]

  @@index([email])
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order     Order[]

  @@index([userId])
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  slug       String      @unique
  parentId   Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  attributes Attribute[]
  parent     Category?   @relation("CategoryToCategory", fields: [parentId], references: [id])
  children   Category[]  @relation("CategoryToCategory")
  products   Product[]

  @@index([parentId])
  @@index([slug])
}

model Attribute {
  id               Int                @id @default(autoincrement())
  name             String
  categoryId       Int
  isFilterable     Boolean            @default(true)
  displayOrder     Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  category         Category           @relation(fields: [categoryId], references: [id])
  options          AttributeOption[]
  VariantAttribute VariantAttribute[]

  @@index([categoryId])
}

model AttributeOption {
  id               Int                @id @default(autoincrement())
  value            String
  attributeId      Int
  createdAt        DateTime           @default(now())
  active           Boolean            @default(true)
  attribute        Attribute          @relation(fields: [attributeId], references: [id])
  VariantAttribute VariantAttribute[]

  @@unique([attributeId, value])
  @@index([attributeId])
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String?        @unique
  description String?
  brand       String
  basePrice   Float
  status      ProductStatus  @default(DRAFT)
  categoryId  Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  cartItems   CartItem[]
  OrderItem   OrderItem[]
  category    Category       @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  variants    Variant[]

  @@index([categoryId])
  @@index([status])
  @@index([slug])
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  url         String
  publicId    String?
  altText     String?
  isThumbnail Boolean  @default(false)
  order       Int      @default(0)
  productId   Int
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Variant {
  id         Int                @id @default(autoincrement())
  name       String
  slug       String             @unique
  sku        String             @unique
  price      Float
  stock      Int                @default(0)
  status     VariantStatus      @default(ACTIVE)
  productId  Int
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  CartItem   CartItem[]
  OrderItem  OrderItem[]
  product    Product            @relation(fields: [productId], references: [id])
  attributes VariantAttribute[]
  images     VariantImage[]

  @@index([productId])
  @@index([sku])
  @@index([slug])
}

model VariantAttribute {
  variantId   Int
  attributeId Int
  optionId    Int
  createdAt   DateTime        @default(now())
  attribute   Attribute       @relation(fields: [attributeId], references: [id])
  option      AttributeOption @relation(fields: [optionId], references: [id])
  variant     Variant         @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([variantId, attributeId])
  @@index([variantId])
  @@index([attributeId, optionId])
  @@index([optionId])
}

model VariantImage {
  id        Int      @id @default(autoincrement())
  url       String
  publicId  String?
  order     Int      @default(0)
  variantId Int
  createdAt DateTime @default(now())
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId Int
  variantId Int?
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  addressId   String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  address     Address     @relation(fields: [addressId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@index([userId])
  @@index([addressId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId Int
  variantId Int?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum VariantStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
